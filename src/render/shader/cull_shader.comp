#version 450

#ifndef COMPUTE_SHADER
#define COMPUTE_SHADER
#endif

#include "quat_util.glsl"
#include "scene_data.h"
#include "scene_set.glsl"
#include "view_set.glsl"

layout(local_size_x = 128) in;
layout(local_size_y = 1) in;
layout(local_size_z = 1) in;

layout(push_constant) uniform Push {
    uint instance_count;
};

float plane_sdf(vec4 plane, vec3 point) {
    return dot(plane.xyz, point) - plane.w;
}

bool is_visible(in AABB boundary, in vec3 position, in vec4 rotation, in vec3 size) {

    vec3 center = quat_rotate(rotation, boundary.center_point * size) + position;

    // Compute the transformed OBB axes
    vec3 right   = quat_rotate(rotation, vec3(1.0, 0.0, 0.0)) * boundary.half_size.x * size.x;
    vec3 up      = quat_rotate(rotation, vec3(0.0, 1.0, 0.0)) * boundary.half_size.y * size.y;
    vec3 forward = quat_rotate(rotation, vec3(0.0, 0.0, 1.0)) * boundary.half_size.z * size.z;

    for (int i = 0; i < 6; i++) { // Check all 6 frustum planes
        vec4 plane = scene_view.frustum.planes[i];

        float center_distance = plane_sdf(plane, center);

        // Correct projected radius (support mapping)
        float extend_distance = abs(dot(plane.xyz, right)) + abs(dot(plane.xyz, up)) + abs(dot(plane.xyz, forward));

        if (center_distance + extend_distance < 0.0) {
            return false;
        }
    }

    // return true;

#pragma region hzb culling
    if (scene_view.is_hzb_culling_enabled.x != 1) return true;

    vec4 c_center  = scene_view.old_proj_view * vec4(center, 1.0);
    vec4 c_right   = scene_view.old_proj_view * vec4(right, 0.0);
    vec4 c_up      = scene_view.old_proj_view * vec4(up, 0.0);
    vec4 c_forward = scene_view.old_proj_view * vec4(forward, 0.0);

    // it only has to be outside of (-1,1)
    vec3 clip_min = vec3(1E10);
    vec3 clip_max = -clip_min;

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                vec4 sum = c_center;
                sum += i == 0 ? -c_right : c_right;
                sum += j == 0 ? -c_up : c_up;
                sum += k == 0 ? -c_forward : c_forward;

                vec3 c_pos = sum.xyz /sum.w;
                clip_min   = min(clip_min, c_pos);
                clip_max   = max(clip_max, c_pos);
            }
        }
    }

    clip_min.xy = clip_min.xy * 0.5 + 0.5;
    clip_max.xy = clip_max.xy * 0.5 + 0.5;

    vec3 clip_size   = (clip_max - clip_min);
    vec3 clip_center = (clip_max + clip_min) * 0.5;

    vec2 hzb_texture_size = textureSize(hzb, 0);

    float level = floor(log2(max(clip_size.x * hzb_texture_size.x, clip_size.y * hzb_texture_size.y)));

    float depth = textureLod(hzb, clip_center.xy, level).x;

    // 1 is closer to screen while 0 is far
    return clip_max.z >= depth;
}

mat4 make_model_matrix(in InstanceData instance, vec3 relative_pos) {
    mat3 inner  = mat3(1);
    inner[0][0] = instance.size.x;
    inner[1][1] = instance.size.y;
    inner[2][2] = instance.size.z;

    inner = mat3_cast(instance.rotation) * inner;

    mat4 result = mat4(inner);
    result[3]   = vec4(relative_pos, 1.0);

    return result;
}

void main() {
    uint instanceID = gl_GlobalInvocationID.x;

    if (instanceID >= instance_count) return;

    InstanceData instance = instances[instanceID];
    ModelData model       = models[instance.model_id];

    vec3 relative_pos = vec3(instance.world_position.xyz);
    AABB boundary;
    boundary.center_point = model.aabb_offset;
    boundary.half_size    = model.aabb_half_size;

    // if (!is_visible(boundary, relative_pos, instance.rotation, instance.size)) return;

    mat4 model_matrix = make_model_matrix(instance, relative_pos);

    for (int i = 0; i < min(MAX_PARTS, model.part_count); i++) {
        uint partID             = model.part_index + i;
        PartData part           = parts[partID];
        uvec2 instance_location = instance_draw_parameter_locations[partID];

        uint draw_parameterID = atomicAdd(instance_counters[partID], 1);
        if (draw_parameterID >= instance_location.y) continue;
        draw_parameterID += instance_location.x;

        instance_draw_parameters[draw_parameterID].model_matrix = model_matrix;
    }
}